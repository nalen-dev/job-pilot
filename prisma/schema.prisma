generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String            @id @default(cuid())
  name      String
  email     String            @unique
  password  String?
  avatar    String?
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  session   Session[]
  cvFile    CvFile[]
  aiSummary AiSummarization[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CvFile {
  id              String            @id @default(cuid())
  userId          String            @map("user_id")
  objectKey       String            @map("object_key")
  fileName        String            @map("file_name")
  path            String            @map("path")
  size            Int               @map("size")
  createdAt       DateTime          @default(now()) @map("created_at")
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiSummarization AiSummarization[]

  @@map("cv_file")
}

model AiSummarization {
  id              String         @id @default(cuid())
  cvId            String?        @map("cv_id")
  userId          String         @map("user_id")
  jobTitle        String?        @map("job_title")
  jobDesc         String         @map("job_desc")
  matchScore      Float?         @map("match_score")
  skillMatch      String[]       @map("skill_match")
  skillMismatch   String[]       @map("skill_mismatch")
  summarizeDetail String?        @map("sumarize_detail")
  status          String         @default("processing")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  cvFile          CvFile?        @relation(fields: [cvId], references: [id], onDelete: SetNull)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userGapSkill    UserGapSkill[]

  @@map("ai_summarization")
}

model UserGapSkill {
  id                 String               @id @default(cuid())
  aisId              String               @map("ais_id")
  skill              String
  status             String
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @map("updated_at")
  assessmentQuestion AssessmentQuestion[]
  aiSummarization    AiSummarization      @relation(fields: [aisId], references: [id])

  @@map("user_gap_skill")
}

model AssessmentQuestion {
  id           String       @id @default(cuid())
  ugsId        String       @map("ugs_id")
  question     String
  ans1         String       @map("ans_1")
  ans2         String       @map("ans_2")
  ans3         String       @map("ans_3")
  ans4         String       @map("ans_4")
  ansRight     String       @map("ans_right")
  ansUser      String?      @map("ans_user")
  userGapSkill UserGapSkill @relation(fields: [ugsId], references: [id])

  @@map("assessment_question")
}
